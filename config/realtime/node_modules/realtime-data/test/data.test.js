const Data = require(process.cwd());
const settings = require(process.cwd() + '/test/settings');

describe('Class and models', function () {

  it('Creation', function () {
    this.data = new Data(settings);
    expect(this.data).to.be.an('object');
    expect(this.data).to.have.property('db').to.be.an('object');
  });

  it('Initialization', function (done) {
    this.data.init(done);
  });

  it('Find one user', function (done) {
    const id = 'U1298';

    this.data.init((err) => {
      expect(err).to.be.falsy;

      this.data.models.user.findOne({ id }).then(res => {
        expect(res).to.be.an('object');
        expect(res).to.have.property('id', id);
        expect(res).to.have.property('category').to.be.a('string');
        expect(res).to.have.property('firstName').to.be.a('string');
        expect(res).to.have.property('lastName').to.be.a('string');
        expect(res).to.have.property('photo').to.be.a('string');
        done();
      }, done);
    });
  });

  it('Find one space', function (done) {
    const id = 'S1';

    this.data.init((err) => {
      expect(err).to.be.falsy;

      this.data.models.realtime_space.findOne(id).populate('rooms').then(res => {
        expect(res).to.be.an('object');
        expect(res).to.have.property('id').to.be.a('string', id);
        expect(res).to.have.property('code').to.be.a('string');
        expect(res).to.have.property('name').to.be.a('string');
        expect(res).to.have.property('rooms').to.be.an('array');
        done();
      }, done);
    });
  });

  it('Find one space-room', function (done) {
    const id = 'R1';

    this.data.init((err) => {
      expect(err).to.be.falsy;

      this.data.models.realtime_space_room.
        findOne(id).
        populate('users').
        populate('messages').
        then(res => {
          expect(res).to.be.an('object');
          expect(res).to.have.property('id').to.be.a('string', id);
          expect(res).to.have.property('space').to.be.a('string');
          expect(res).to.have.property('name').to.be.a('string');
          expect(res).to.have.property('createdAt').to.be.a('date');
          expect(res).to.have.property('disabled').to.be.a('boolean');
          expect(res).to.have.property('users').to.be.an('array');
          expect(res).to.have.property('messages').to.be.an('array');

          res.users.forEach(user => expect(user).to.be.an('object'));
          res.messages.forEach(message => expect(message).to.be.an('object'));

          if (res.tag) {
            expect(res).to.have.property('tag').to.be.a('string');
          }

          done();
        }, done);
    });
  });

  it('Find one room-user', function (done) {
    const room = 'R1';
    const user = 'U1298';

    this.data.init((err) => {
      expect(err).to.be.falsy;

      this.data.models.realtime_room_user.findOne({ room, user }).then(res => {
        expect(res).to.be.an('object');
        expect(res).to.have.property('room').to.be.a('string', room);
        expect(res).to.have.property('user').to.be.a('string', user);
        expect(res).to.have.property('moderator').to.be.a('boolean');
        expect(res).to.have.property('inactive').to.be.a('boolean');
        done();
      }, done);
    });
  });

  it('Find one room-message', function (done) {
    const id = 'RM1';

    this.data.init((err) => {
      expect(err).to.be.falsy;

      this.data.models.realtime_room_message.findOne({ id }).then(res => {
        expect(res).to.be.an('object');
        expect(res).to.have.property('id').to.be.a('string', id);
        expect(res).to.have.property('room').to.be.a('string');
        expect(res).to.have.property('user').to.be.a('string');
        expect(res).to.have.property('content').to.be.a('string');
        expect(res).to.have.property('createdAt').to.be.a('date');
        done();
      }, done);
    });
  });

  after(function (done) {
    this.data.db.teardown(done);
  });

});
